@page "/predictions"
@using Services
@using Models
@inject IPredictionService PredictionService
@inject NavigationManager NavManager
@inject IModalService Modal

<h1>Company stock price predictions</h1>
@if (predictions == null)
{
    <p class="predictions"><em>Loading predictions...</em></p>
}
else
{
    <div style=" height:800px;overflow-y:scroll">
    <table class="table">
        <thead>
            <tr>
                <th>CompanyName</th>
                <th>Date</th>
                <th>LowPrice</th>
                <th>HighPrice</th>
                <th>OpenPrice</th>
                <th>ClosePrice</th>
                <th>Volume</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var prediction in predictions)
            {
                <tr>
                    <td class="text-primary" style="cursor:pointer" @onclick="@(() => NavigateToCompany(prediction.CompanyId))">@prediction.CompanyName</td>
                    <td>@prediction.Date</td>
                    <td>@prediction.LowPrice</td>
                    <td>@prediction.HighPrice</td>
                    <td>@prediction.OpenPrice</td>
                    <td>@prediction.ClosePrice</td>
                    <td>@prediction.Volume</td>
                </tr>

            }
        </tbody>
    </table>
</div>

  
    <button class="btn btn-primary" @onclick="@ShowAddPopup"> Add</button>
    /*
    <EditForm Model="@prediction" OnValidSubmit="@OnInitializedAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="Name">Name</label>
            <InputString id="Expense" class="form-control" @bind-Value="prediction.CompanyName" />
        </div>
        <div class="container btn-group">
            <div class="row">
                <div class="col text-center">
                    <button class="btn btn-primary ">Centered button</button>
                </div>
            </div>
        </div>
    </EditForm>*/
    }


    @code {
private List<Prediction> predictions;
    private Prediction prediction = new Prediction();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }


    protected override async Task OnInitializedAsync()
    {
        predictions = await PredictionService.GetPredictions();
    }

    public void NavigateToCompany(int id)
    {
        NavManager.NavigateTo("/company/" + id);
    }

    private bool IsModalClosed = true;

    private async Task ShowAddPopup()
    {
        if (IsModalClosed)
        {
            var modal = Modal.Show<CreatePredPopup>("Add Data Stock");
            IsModalClosed = false;
            var result = await modal.Result;
            IsModalClosed = true;
        }
    }

    private async Task ShowEditPopup(int id)
    {

        if (IsModalClosed)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(Finance.Id), id);

            var modal = Modal.Show<CreatePredPopup>("Update Finance", parameters);
            IsModalClosed = false;
            var result = await modal.Result;
            IsModalClosed = true;
        }
    }
    }


    <style>
        .predictions {
            color: white;
        }

        .table {
            color: whitesmoke;
        }
    </style>
