@page "/Login"
@using Models
@using Services
@inject IUserService AuthService
@inject ISessionService SessionService
@inject NavigationManager NavigationManager

@if (invalidCredentials == true)
{
    <p style="color: red">Credentials are invalid!</p>
}
<EditForm Model="@user" OnValidSubmit="@OnValidSubmit" class="section-1-container section-container">
    <DataAnnotationsValidator />
    <h1>Login</h1>
    <div class="form-group">
        <label class="label-text">Username :</label>
        <div>
            <InputText @bind-Value="@user.Username" class="form-control col-sm-5" />
            <ValidationMessage For="@(() => user.Username)" />
        </div>
    </div>
    <div class="form-group">
        <label class="label-text">Password :</label>
        <div>
            <InputText type="password" @bind-Value="@user.Password" class="form-control col-sm-5" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>
    </div>

    <button type="submit" @onclick="() => OnFormSubmit()" class="btn btn-primary">
        @ButtonText
    </button>
</EditForm>

@code {

    public LoginModel user = new LoginModel();

    public string ButtonText { get; set; } = "Login";

    public EventCallback OnValidSubmit { get; set; }
    public bool invalidCredentials = false;

    public async void OnFormSubmit()
    {
        var result = await AuthService.Login(user);
        if (string.IsNullOrEmpty(result.Token))
        {
            invalidCredentials = true;
            StateHasChanged();
        }
        else
        {

            invalidCredentials = false;
            SessionService.SetToken(result);
            StateHasChanged();
            NavigationManager.NavigateTo("");


        }
    }

}


